{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG/B,IAAIC,EAAW,KACXC,EAAU,KACVC,EAAY,KACZC,EAAQ,EAcZP,EAAKC,KAAKO,iBAAiB,UAE3B,SAA6BC,GAC3BA,EAAIC,iBAEJ,MAAQC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,GAAWL,EAAIM,cAAcC,SAClDZ,GAAYQ,EAAMK,MAClBZ,GAAWQ,EAAKI,MAChBX,GAAaQ,EAAOG,MAEpB,IAAIC,EAAa,EAEjBC,YAAW,KACTD,EAAaE,aAAY,KAzB7B,IAAuBC,EAAUV,EA0BvBL,GAAaC,IA1BAc,EA2BDd,EA3BWI,EA2BJP,EA1BpB,IAAIkB,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEF,E,MAAUV,IAEpBa,EAAO,C,SAAEH,E,MAAUV,GAAQ,KAqBtBgB,MAAK,EAACN,SAAEA,EAAQV,MAAEA,MACjBb,EAAA8B,OAAOC,QAAQ,uBAAqBR,QAAiBV,MAAW,CAC5DmB,QAAO,KACT,IAEHC,OAAM,EAACV,SAAEA,EAAQV,MAAEA,MAClBb,EAAA8B,OAAOI,QAAQ,sBAAoBX,QAAeV,MAAW,CAC3DmB,QAAS,KACT,IAEHG,SAAQ,KACH3B,EAAYC,GAY5B,SAAuBW,GACrBgB,cAAchB,E,CAZFiB,CAAcjB,EAAW,IAIjCX,GAAO,GACNF,EAAQ,GACVD,GAEHK,EAAIM,cAAcqB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nlet delayInp = null;\nlet stepInp = null;\nlet amountInp = null;\nlet count = 1;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay }); // Fulfill\n    } else {\n      reject({ position, delay }); // Reject\n    }\n  });\n}\n\nrefs.form.addEventListener('submit', hendleEventOnSubmit);\n\nfunction hendleEventOnSubmit(eve) {\n  eve.preventDefault();\n\n  const { delay, step, amount } = eve.currentTarget.elements;\n  delayInp = +delay.value;\n  stepInp = +step.value;\n  amountInp = +amount.value;\n\n  let intervalID = 0;\n\n  setTimeout(() => {\n    intervalID = setInterval(() => {\n      if (amountInp >= count) {\n        createPromise(count, delayInp)\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n              timeout: 5000,\n            });\n          })\n          .catch(({ position, delay }) => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n              timeout: 5000,\n            });\n          })\n          .finally(() => {\n            if (amountInp < count) {\n              setIntervalID(intervalID);\n            }\n          });\n      }\n      count++;\n    }, stepInp);\n  }, delayInp);\n\n  eve.currentTarget.reset();\n}\n\nfunction setIntervalID(intervalID) {\n  clearInterval(intervalID);\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$delayInp","$47d4ff9957288465$var$stepInp","$47d4ff9957288465$var$amountInp","$47d4ff9957288465$var$count","addEventListener","eve","preventDefault","delay","delay1","step","amount","currentTarget","elements","value","intervalID","setTimeout","setInterval","position","Promise","resolve","reject","Math","random","then","Notify","success","timeout","catch","failure","finally","clearInterval","$47d4ff9957288465$var$setIntervalID","reset"],"version":3,"file":"03-promises.52977d99.js.map"}