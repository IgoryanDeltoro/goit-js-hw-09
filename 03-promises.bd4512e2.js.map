{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG3BC,EAAW,KACXC,EAAU,KACVC,EAAY,KACZC,EAAQ,EAcZP,EAAKC,KAAKO,iBAAiB,UAE3B,SAA6BC,GAC3BA,EAAIC,iBAEJ,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBI,MAAOC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OACrBb,GAAYU,EAAMI,MAClBb,GAAWW,EAAKE,MAChBZ,GAAaW,EAAOC,MAEpB,IAAIC,EAAa,EAEjBC,YAAW,WACTD,EAAaE,aAAY,WAzB7B,IAAuBC,EAAUP,EA0BvBT,GAAaC,IA1BAe,EA2BDf,EA3BWQ,EA2BJX,EA1BpB,IAAImB,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEF,WAAUP,UAEpBU,EAAO,CAAEH,WAAUP,S,KAqBda,MAAK,SAAAC,G,IAAGP,EAAQO,EAARP,SAAUP,EAAKc,EAALd,MACjBjB,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAfV,EAAS,QAAYU,OAANjB,EAAM,MAAK,CAC9DkB,QAAO,K,IAGZC,OAAM,SAAAL,G,IAAGP,EAAQO,EAARP,SAAUP,EAAKc,EAALd,MAClBjB,EAAAgC,OAAOK,QAAQ,sBAAqCH,OAAfV,EAAS,QAAYU,OAANjB,EAAM,MAAK,CAC7DkB,QAAS,K,IAGZG,SAAQ,WACH9B,EAAYC,GAY5B,SAAuBY,GACrBkB,cAAclB,E,CAZFmB,CAAcnB,E,IAItBZ,G,GACCF,E,GACFD,GAEHK,EAAIG,cAAc2B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nlet delayInp = null;\nlet stepInp = null;\nlet amountInp = null;\nlet count = 1;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay }); // Fulfill\n    } else {\n      reject({ position, delay }); // Reject\n    }\n  });\n}\n\nrefs.form.addEventListener('submit', hendleEventOnSubmit);\n\nfunction hendleEventOnSubmit(eve) {\n  eve.preventDefault();\n\n  const { delay, step, amount } = eve.currentTarget.elements;\n  delayInp = +delay.value;\n  stepInp = +step.value;\n  amountInp = +amount.value;\n\n  let intervalID = 0;\n\n  setTimeout(() => {\n    intervalID = setInterval(() => {\n      if (amountInp >= count) {\n        createPromise(count, delayInp)\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n              timeout: 5000,\n            });\n          })\n          .catch(({ position, delay }) => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n              timeout: 5000,\n            });\n          })\n          .finally(() => {\n            if (amountInp < count) {\n              setIntervalID(intervalID);\n            }\n          });\n      }\n      count++;\n    }, stepInp);\n  }, delayInp);\n\n  eve.currentTarget.reset();\n}\n\nfunction setIntervalID(intervalID) {\n  clearInterval(intervalID);\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$delayInp","$ce04d3a99e08e73b$var$stepInp","$ce04d3a99e08e73b$var$amountInp","$ce04d3a99e08e73b$var$count","addEventListener","eve","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","value","intervalID","setTimeout","setInterval","position","Promise","resolve","reject","Math","random","then","param","Notify","success","concat","timeout","catch","failure","finally","clearInterval","$ce04d3a99e08e73b$var$setIntervalID","reset"],"version":3,"file":"03-promises.bd4512e2.js.map"}